name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        cpp_compiler: [g++, clang++]
        openssl_version: ["3.0.0"]  # Specify the desired OpenSSL version

    steps:
    - uses: actions/checkout@v4

    - name: Update OpenSSL (Windows only)
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        # Download and install the desired OpenSSL version
        curl -LO https://github.com/OpenSSL/openssl/releases/download/OpenSSL_${{ matrix.openssl_version }}/OpenSSL_${{ matrix.openssl_version }}_Win64.zip
        Expand-Archive -Path .\OpenSSL_${{ matrix.openssl_version }}_Win64.zip -DestinationPath C:\OpenSSL
        # Add OpenSSL bin directory to the PATH environment variable
        $env:PATH += ";C:\OpenSSL\bin"
        # Verify OpenSSL installation
        openssl version

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DOPENSSL_ROOT_DIR=C:/OpenSSL
        -S ${{ github.workspace }}

    - name: Configure CMake (Linux)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
